# LangGraph Example: Pentesting Workflow Router
#
# This script defines the router for our pentesting workflow using LangGraph.
# It includes the necessary router function to decide the next step after analysis.
#
# Instructor: Omar Santos @santosomar


from pentest_graph_state import AttackSurfaceState

def should_proceed_to_report(state: AttackSurfaceState) -> str:
    """
    Router function to decide the next step after analysis.
    For this example, we always go to report, but this shows where
    you would add branching logic.
    """
    print("--- DECISION: Checking if vulnerabilities were found. ---")
    vulnerabilities = state.get("vulnerabilities", [])
    
    if not vulnerabilities:
        print("--- No vulnerabilities found. Proceeding to report. ---")
        return "generate_report"
    
    is_exploitable = state.get("is_exploitable", False)
    if is_exploitable:
        print("--- EXPLOITABLE vulnerability found. Stopping for manual review. (In real-world, could proceed to exploit). ---")
        # In a real scenario, you could have an "exploit" branch here
        # return "attempt_exploitation"
        return "generate_report" # For safety, we go to report
    else:
        print("--- No exploitable vulnerabilities identified by LLM. Proceeding to report. ---")
        return "generate_report"
