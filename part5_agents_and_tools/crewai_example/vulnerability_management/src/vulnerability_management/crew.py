from crewai import Agent, Crew, Process, Task
from crewai.project import CrewBase, agent, crew, task
from crewai.agents.agent_builder.base_agent import BaseAgent
from typing import List
from .tools.custom_tool import NmapScanTool, CVELookupTool, PortScanTool
# If you want to run a snippet of code before or after the crew starts,
# you can use the @before_kickoff and @after_kickoff decorators
# https://docs.crewai.com/concepts/crews#example-crew-class-with-decorators

@CrewBase
class VulnerabilityManagement():
    """VulnerabilityManagement crew for comprehensive vulnerability assessment and remediation planning"""

    agents: List[BaseAgent]
    tasks: List[Task]

    # Learn more about YAML configuration files here:
    # Agents: https://docs.crewai.com/concepts/agents#yaml-configuration-recommended
    # Tasks: https://docs.crewai.com/concepts/tasks#yaml-configuration-recommended
    
    # Initialize vulnerability management tools
    def __init__(self):
        super().__init__()
        self.nmap_scanner = NmapScanTool()
        self.cve_lookup = CVELookupTool()
        self.port_scanner = PortScanTool()
    
    @agent
    def vulnerability_scanner(self) -> Agent:
        return Agent(
            config=self.agents_config['vulnerability_scanner'], # type: ignore[index]
            verbose=True,
            tools=[self.nmap_scanner, self.port_scanner, self.cve_lookup]
        )

    @agent
    def vulnerability_analyst(self) -> Agent:
        return Agent(
            config=self.agents_config['vulnerability_analyst'], # type: ignore[index]
            verbose=True,
            tools=[self.cve_lookup]
        )

    @agent
    def risk_assessor(self) -> Agent:
        return Agent(
            config=self.agents_config['risk_assessor'], # type: ignore[index]
            verbose=True,
            tools=[self.cve_lookup]
        )

    @agent
    def remediation_advisor(self) -> Agent:
        return Agent(
            config=self.agents_config['remediation_advisor'], # type: ignore[index]
            verbose=True
        )

    # To learn more about structured task outputs,
    # task dependencies, and task callbacks, check out the documentation:
    # https://docs.crewai.com/concepts/tasks#overview-of-a-task
    @task
    def vulnerability_discovery_task(self) -> Task:
        return Task(
            config=self.tasks_config['vulnerability_discovery_task'], # type: ignore[index]
        )

    @task
    def vulnerability_analysis_task(self) -> Task:
        return Task(
            config=self.tasks_config['vulnerability_analysis_task'], # type: ignore[index]
        )

    @task
    def risk_prioritization_task(self) -> Task:
        return Task(
            config=self.tasks_config['risk_prioritization_task'], # type: ignore[index]
        )

    @task
    def remediation_planning_task(self) -> Task:
        return Task(
            config=self.tasks_config['remediation_planning_task'], # type: ignore[index]
            output_file='vulnerability_remediation_plan.md'
        )

    @crew
    def crew(self) -> Crew:
        """Creates the VulnerabilityManagement crew with sequential process for systematic vulnerability assessment"""
        # To learn how to add knowledge sources to your crew, check out the documentation:
        # https://docs.crewai.com/concepts/knowledge#what-is-knowledge

        return Crew(
            agents=self.agents, # Automatically created by the @agent decorator
            tasks=self.tasks, # Automatically created by the @task decorator
            process=Process.sequential,
            verbose=True,
            # The sequential process ensures:
            # 1. First: Vulnerability Discovery (scanning)
            # 2. Second: Vulnerability Analysis (detailed assessment)
            # 3. Third: Risk Prioritization (business impact assessment)
            # 4. Fourth: Remediation Planning (actionable remediation steps)
            # process=Process.hierarchical, # In case you wanna use that instead https://docs.crewai.com/how-to/Hierarchical/
        )
