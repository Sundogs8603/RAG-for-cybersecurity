#!/usr/bin/env python
import sys
import warnings

from datetime import datetime

from vulnerability_management.crew import VulnerabilityManagement

warnings.filterwarnings("ignore", category=SyntaxWarning, module="pysbd")

# This main file is intended to be a way for you to run your
# crew locally, so refrain from adding unnecessary logic into this file.
# Replace with inputs you want to test with, it will automatically
# interpolate any tasks and agents information

def run():
    """
    Run the vulnerability management crew.
    """
    # Example target systems - modify these based on your needs
    # For production use, consider reading from config file or command line args
    inputs = {
        'target_systems': [
            "192.168.1.100",  # Example internal server
            "example.com",     # Example external domain
            "10.0.0.1"         # Example network device
        ]
    }
    
    print("Starting Vulnerability Management Assessment...")
    print(f"Target systems: {inputs['target_systems']}")
    print("This process will:")
    print("1. Discover vulnerabilities through scanning")
    print("2. Analyze discovered vulnerabilities")
    print("3. Prioritize risks based on business impact")
    print("4. Create remediation plans")
    print("\nNote: Ensure you have proper authorization before scanning target systems.")
    
    try:
        result = VulnerabilityManagement().crew().kickoff(inputs=inputs)
        print("\nVulnerability assessment completed successfully!")
        print("Check the generated vulnerability_remediation_plan.md file for detailed results.")
        return result
    except Exception as e:
        raise Exception(f"An error occurred while running the vulnerability management crew: {e}")


def train():
    """
    Train the crew for a given number of iterations.
    """
    inputs = {
        "topic": "AI LLMs",
        'current_year': str(datetime.now().year)
    }
    try:
        VulnerabilityManagement().crew().train(n_iterations=int(sys.argv[1]), filename=sys.argv[2], inputs=inputs)

    except Exception as e:
        raise Exception(f"An error occurred while training the crew: {e}")

def replay():
    """
    Replay the crew execution from a specific task.
    """
    try:
        VulnerabilityManagement().crew().replay(task_id=sys.argv[1])

    except Exception as e:
        raise Exception(f"An error occurred while replaying the crew: {e}")

def test():
    """
    Test the crew execution and returns the results.
    """
    inputs = {
        "topic": "AI LLMs",
        "current_year": str(datetime.now().year)
    }
    
    try:
        VulnerabilityManagement().crew().test(n_iterations=int(sys.argv[1]), eval_llm=sys.argv[2], inputs=inputs)

    except Exception as e:
        raise Exception(f"An error occurred while testing the crew: {e}")
